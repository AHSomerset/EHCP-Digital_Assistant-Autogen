# CloudSync CLI Commands Reference

## Installation
```bash
# macOS
brew install cloudsync

# Linux
curl -fsSL https://get.cloudsync.io | bash

# Windows
winget install CloudSync
```

## Authentication
```bash
# Login with credentials
cloudsync auth login

# Login with API key
cloudsync auth login --api-key YOUR_API_KEY

# Logout
cloudsync auth logout

# Show current user
cloudsync auth whoami
```

## File Operations
```bash
# Upload file
cloudsync upload /path/to/file.txt
cloudsync upload /path/to/file.txt --folder-id FOLDER_ID

# Upload directory
cloudsync upload /path/to/directory --recursive

# Download file
cloudsync download FILE_ID
cloudsync download FILE_ID --output /path/to/save.txt

# List files
cloudsync ls
cloudsync ls --folder-id FOLDER_ID
cloudsync ls --limit 100 --page 2

# Delete file
cloudsync rm FILE_ID
cloudsync rm FILE_ID --force  # Skip confirmation

# Move file
cloudsync mv FILE_ID --to-folder FOLDER_ID

# Copy file
cloudsync cp FILE_ID --to-folder FOLDER_ID
```

## Sync Operations
```bash
# Start sync daemon
cloudsync sync start

# Stop sync daemon
cloudsync sync stop

# Sync status
cloudsync sync status

# Add folder to sync
cloudsync sync add /local/path --remote-folder FOLDER_ID

# Remove folder from sync
cloudsync sync remove /local/path

# Force sync now
cloudsync sync now

# Resolve conflicts
cloudsync sync conflicts
cloudsync sync resolve FILE_ID --strategy local  # or remote, rename
```

## Folder Management
```bash
# Create folder
cloudsync mkdir "New Folder"
cloudsync mkdir "New Folder" --parent-id PARENT_FOLDER_ID

# List folders
cloudsync folders

# Remove folder
cloudsync rmdir FOLDER_ID
cloudsync rmdir FOLDER_ID --recursive  # Include contents
```

## Sharing
```bash
# Share file
cloudsync share FILE_ID --email user@example.com
cloudsync share FILE_ID --public  # Get public link

# List shares
cloudsync shares

# Revoke share
cloudsync unshare SHARE_ID
```

## Configuration
```bash
# Show config
cloudsync config list

# Set config value
cloudsync config set upload.chunk_size 10MB
cloudsync config set sync.interval 300

# Get config value
cloudsync config get sync.interval

# Reset to defaults
cloudsync config reset
```

## Advanced Options
```bash
# Verbose output
cloudsync -v upload file.txt

# JSON output
cloudsync --json ls

# Dry run
cloudsync --dry-run sync now

# Custom API endpoint
cloudsync --api-url https://custom.api.com upload file.txt

# Parallel uploads
cloudsync upload *.txt --parallel 5

# Progress bar
cloudsync upload large-file.zip --progress

# Checksum verification
cloudsync download FILE_ID --verify-checksum
```

## Webhooks
```bash
# Register webhook
cloudsync webhook create https://myapp.com/hook --events file.created,file.updated

# List webhooks
cloudsync webhook list

# Delete webhook
cloudsync webhook delete WEBHOOK_ID

# Test webhook
cloudsync webhook test WEBHOOK_ID
```

## Troubleshooting Commands
```bash
# Check connectivity
cloudsync doctor

# Clear cache
cloudsync cache clear

# Reset sync database
cloudsync sync reset

# Export logs
cloudsync logs export --since 1h

# Debug mode
CLOUDSYNC_DEBUG=1 cloudsync upload file.txt
```

## Environment Variables
```bash
CLOUDSYNC_API_KEY       # API key for authentication
CLOUDSYNC_API_URL       # Custom API endpoint
CLOUDSYNC_CONFIG_PATH   # Config file location
CLOUDSYNC_CACHE_DIR     # Cache directory
CLOUDSYNC_LOG_LEVEL     # Log level (debug, info, warn, error)
CLOUDSYNC_TIMEOUT       # Request timeout in seconds
```

## Config File Example (~/.cloudsync/config.yml)
```yaml
api:
  url: https://api.cloudsync.io/v2
  timeout: 30

auth:
  api_key: YOUR_API_KEY

upload:
  chunk_size: 10MB
  parallel: 3
  retry_attempts: 3

sync:
  interval: 300
  exclude_patterns:
    - "*.tmp"
    - ".DS_Store"
    - "node_modules/"

logging:
  level: info
  file: ~/.cloudsync/cloudsync.log
```

## Exit Codes
- 0: Success
- 1: General error
- 2: Authentication error
- 3: Network error
- 4: File not found
- 5: Permission denied
- 6: Quota exceeded
- 7: Invalid arguments