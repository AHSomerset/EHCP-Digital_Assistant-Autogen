import autogen
from autogen import ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager
from typing import List, Dict

from utils import (
    read_markdown_file,
    #read_pdf_file,
    list_files_in_directory,
    save_markdown_file,
    DOCS_DIR,
    OUTPUTS_DIR,
)

def create_writer_team(llm_config: Dict) -> GroupChatManager:
    """
    Creates and configures the writer multi-agent team.
    """
    writer_user_proxy = UserProxyAgent(
        name="Writer_User_Proxy",
        is_termination_msg=lambda x: x.get("content", "") and "FINAL" in x.get("content", ""),
        human_input_mode="NEVER",
        max_consecutive_auto_reply=50,
        code_execution_config={"use_docker": False},
        llm_config=llm_config,
        system_message="You are the user proxy for the writer team. You orchestrate the task by calling tools. "
                       "You will call file tools to read guidance, source documents, and previous outputs. "
                       "First, find and read the guidance. Then find and read the source documents. "
                       "Provide the collected content to the Document_Writer. "
                       "After the writer generates the content, you MUST use the save_markdown_file tool to save it. "
                       "After saving the file, reply with the word 'FINAL' to end the conversation."
    )

    document_writer = ConversableAgent(
        name="Document_Writer",
        llm_config=llm_config,
        system_message= "You are a professional document writer. Your job is to synthesize information into a clear document. "
                        "If you are given feedback on a previous version, your primary goal is to **refine the existing content** to address "
                        "the specific issues raised. Do not start over unless explicitly told to."
                        "Your generated content must be based entirely on the provided guidance and source documents. "
    )

    planner = ConversableAgent(
        name="Planner",
        llm_config=llm_config,
        system_message="""You are a meticulous planner. Your role is to create a precise, step-by-step plan for the team. You do not write content or call tools yourself. Your output must be ONLY the plan.

**Planning for Initial Creation (Iteration 1):**
Your plan MUST follow this structure:
1.  **Read Guidance & Sources:** Direct the `Writer_User_Proxy` to read the writer's guidance and all source documents from the `processed_docs` folder.
2.  **Draft Content:** Direct the `Document_Writer` to synthesize the gathered information into a DRAFT of the document section.
3.  **Fact-Check Draft:** Direct the `Fact_Checker` to review the draft produced by the `Document_Writer` against the source document content. The `Fact_Checker` must either state "APPROVED" or provide a list of corrections.
4.  **Finalize Content:** If corrections are needed, direct the `Document_Writer` to create a final, corrected version. If the draft was approved, this step can be skipped.
5.  **Save Output:** Direct the `Writer_User_Proxy` to save the final, fact-checked content to the specified output file.

**Planning for Correction (Based on Validator Feedback):**
Your plan MUST follow this structure:
1.  **Analyze Feedback & Read Files:** Direct the `Writer_User_Proxy` to read the feedback and the existing incorrect output file.
2.  **Generate Corrected Draft:** Direct the `Document_Writer` to generate a new DRAFT of the content, focusing on fixing the issues from the feedback.
3.  **Fact-Check Corrected Draft:** Direct the `Fact_Checker` to review the new draft against the source documents to ensure no new factual errors were introduced.
4.  **Finalize Content:** If the `Fact_Checker` found new issues, direct the `Document_Writer` to make final adjustments.
5.  **Save Final Output:** Direct the `Writer_User_Proxy` to save the final, corrected, and fact-checked content.
"""
    )

    fact_checker = ConversableAgent(
        name="Fact_Checker",
        llm_config=llm_config,
        system_message="""You are a meticulous Fact Checker. Your sole purpose is to verify the factual accuracy of text generated by the Document_Writer.

        You will be given:
        1.  The full content of the source documents.
        2.  The draft text generated by the Document_Writer.

        Your task is to compare the draft text against the source documents and identify any discrepancies, hallucinations, or information that cannot be verified.

        Your output should be a list of findings. If there are no issues, you MUST respond with the single word "APPROVED". If there are issues, list them clearly, for example:
        - "The draft mentions the subject's birth date is 10-JAN-2010, but the source document states it is 12-JAN-2010."
        - "The draft includes the service 'Speech Therapy', which is not mentioned in any of the source documents."
        """
    )
    
    
    # Register tools for the UserProxyAgent to call
    for func in [read_markdown_file, list_files_in_directory, save_markdown_file]:
        autogen.agentchat.register_function(
            func,
            caller=writer_user_proxy,
            executor=writer_user_proxy,
            name=func.__name__,
            description=func.__doc__,
        )

    # Create the group chat and manager
    groupchat = GroupChat(
        agents=[writer_user_proxy, document_writer, planner, fact_checker],
        messages=[],
        max_round=100
    )
    
    manager = GroupChatManager(
        groupchat=groupchat,
        llm_config=llm_config
    )
    
    return manager